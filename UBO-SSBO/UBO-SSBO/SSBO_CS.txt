#version 430

// SSBO buffer, should be alignment of vec4

struct Particle{
	vec4 ssbo_position;
	vec4 ssbo_velocity;
	vec4 ssbo_color;
};

layout (std430, binding = 1 ) buffer ssbo
{
	Particle particles[];
};


// workgroup size
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;


// uniform
 uniform int numPoint;

 float random (vec2 st) { 
   return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);
}


void main()
{

	/////////////////////////////
	uint accessID[256];
	uint NUM = 256;
	//float sum_coef = 128.0 / 256.0;
	float sum_coef = 128.0 / 256.0;
	//////////////////////////////

	// uint i = gl_WorkGroupID.x; // number of Workgroup
	// uint i = gl_LocalInvocationID.x; // number in this Workgroup
	uint i = gl_GlobalInvocationID.x; // globalID
	
	vec2 velocity = particles[i].ssbo_velocity.xy * 0.95;


	for( int j = 0 ; j < NUM ; j++ )
	{
		accessID[j] = (i+j) % numPoint;
	}


	float coef_push = 0.000015 * sum_coef * particles[i].ssbo_position.z;
	float coef_pull = 0.00004 * sum_coef * particles[i].ssbo_position.w;


	for( int k = 0 ; k < NUM ; k++ )
	{
		vec2 tempVec;

		tempVec.x = (particles[accessID[k]].ssbo_position.x - particles[i].ssbo_position.x);
		tempVec.y = (particles[accessID[k]].ssbo_position.y - particles[i].ssbo_position.y);
		
		float distance = sqrt( tempVec.x * tempVec.x + tempVec.y * tempVec.y );

		if( distance < 0.3 && distance > 0.0001 )
		{
			velocity.x -= tempVec.x*(1.0/distance) * coef_push;
			velocity.y -= tempVec.y*(1.0/distance) * coef_push;
		}
		else if( distance >= 0.3 )
		{
			velocity.x += tempVec.x * (distance) * coef_pull;
			velocity.y += tempVec.y * (distance) * coef_pull;
		}
		else
		{
			
		}


	}

	////////////////////////////////////////////////////////

	// CALC COLOR
	vec4 calc_color;
	float vel_length = sqrt( velocity.x * velocity.x + velocity.y * velocity.y );


	// RED
		calc_color.x = max( 0.0, velocity.x * 50.0);
		calc_color.x = sqrt( calc_color.x );

	// GREEN
		calc_color.y = max( 0.0, velocity.y * 50.0);
		calc_color.y = sqrt( calc_color.y );

	// BLUE ALPHA
	calc_color.z = 1.0;
	calc_color.w = vel_length * 100.0 + 0.5;

	//////////////////////////////////////////////////////////////

	// SET POSITION
	particles[i].ssbo_position.x += velocity.x;
	particles[i].ssbo_position.y += velocity.y;
	//particles[i].ssbo_position.z = 0.0;
	//particles[i].ssbo_position.w = 0.0; // dont use


	// SET VELOCITY
	particles[i].ssbo_velocity.x = velocity.x;
	particles[i].ssbo_velocity.y = velocity.y;

	// SET_COLOR
	particles[i].ssbo_color = calc_color;
}